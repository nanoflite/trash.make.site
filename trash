#!/usr/bin/env make -f

## Welcome to...
## ┏┓┓┳━┓┳━┓┓━┓┳ ┳ ┏┏┓┳━┓┳┏ ┳━┓ ┓━┓o┏┓┓┳━┓
##  ┃ ┃┳┛┃━┫┗━┓┃━┫ ┃┃┃┃━┫┣┻┓┣━  ┗━┓┃ ┃ ┣━ 
##  ┇ ┇┗┛┛ ┇━━┛┇ ┻o┛ ┇┛ ┇┇ ┛┻━┛o━━┛┇ ┇ ┻━┛
## (c) 2020-2023 JVdB

src := source/data
dst := build

resizeflag := 800x600\>
ditherflag := bn256x256

convertflags := -set colorspace Gray -separate -average \
				-resize $(resizeflag) 

convertjpg := $(convertflags) -ordered-dither $(ditherflag)


.ONESHELL:

.PHONY: debug help clean serve docs


docs:
	@cat trash | sed -ne '/^##/ s/^##//p'

ALLOWED_PARAMS := '$$SITE_TITLE $$SITE_DESCRIPTION $$SITE_IMAGE $$SITE_NAV \
	$$SITE_URL $$SITE_COPYRIGHT $$SITE_TTL $$SITE_LASTBUILD $$TITLE $$DESCRIPTION $$DATE $$IMAGE $$LINK \
	$$COVER_IMAGE'

mdfiles := $(shell find source/data -name \*.md)


# meta:
# $(call pages,html)

htmlpages := $(patsubst %.md,%.html,\
				$(patsubst source/data/%,build/html/%,\
					$(mdfiles)))

htmltheme := $(shell find source/theme -name "*.html") \
				$(patsubst source/theme/assets/%,build/html/assets/%,\
			  		$(shell find source/theme/assets -type f))

htmlindex := $(dst)/html/index.html

htmlrss := $(dst)/html/index.xml

gmipages := $(patsubst %.md,%.gmi,\
				$(patsubst source/data/%,build/gemini/%,\
					$(mdfiles)))

gmitheme := $(shell find source/theme -name "*.gmi")

gmiindex := $(dst)/gemini/index.gmi

gophermappages := $(patsubst %.md,%.gophermap,\
				$(patsubst source/data/%,build/.gophershadow/%,\
					$(mdfiles)))

gophermaptheme := $(shell find source/theme -name "*.gophermap")

gophermapindex := $(dst)/gopher/gophermap



# -- Tools

define copy
	echo "copy $(@F)"
	mkdir -p $(@D)
	cp -a $< $@
endef

# -- Images

define img
	echo "img $(@F)"
	mkdir -p $(@D)
	convert $< $1 $@ 
endef

# -- Handle JPG images


# candidate for meta programming
# $(eval $(call handleimages,jpg))
# --> above call generates below + gemini and gopher images)
jpgsourceimages := $(shell find $(src) -name "*.jpg") 
jpgconvertedimages := $(patsubst $(src)/%,$(dst)/images/%,$(jpgsourceimages))
jpgtargetimages := $(patsubst $(dst)/images/%,$(dst)/html/%,$(jpgconvertedimages))
htmljpgimages := $(patsubst $(dst)/images/%,$(dst)/html/%,$(jpgconvertedimages))
geminipgimages := $(patsubst $(dst)/images/%,$(dst)/gemini/%,$(jpgconvertedimages))
gopherjpgimages := $(patsubst $(dst)/images/%,$(dst)/gopher/%,$(jpgconvertedimages))

$(dst)/images/%.jpg: source/data/%.jpg
	@$(call img,$(convertjpg))


# -- Handle GIF images

gifsourceimages := $(shell find $(src) -name "*.gif") 
gifconvertedimages := $(patsubst $(src)/%,$(dst)/images/%,$(gifsourceimages))
giftargetimages := $(patsubst $(dst)/images/%,$(dst)/html/%,$(gifconvertedimages))
htmlgifimages := $(patsubst $(dst)/images/%,$(dst)/html/%,$(gifconvertedimages))
geminigifimages := $(patsubst $(dst)/images/%,$(dst)/gemini/%,$(gifconvertedimages))
gophergifimages := $(patsubst $(dst)/images/%,$(dst)/gopher/%,$(gifconvertedimages))

$(dst)/images/%.gif: source/data/%.gif
	@$(call img,$(convertflags))

# -- Handle PNG images

pngsourceimages := $(shell find $(src) -name "*.png") 
pngconvertedimages := $(patsubst $(src)/%,$(dst)/images/%,$(pngsourceimages))
pngtargetimages := $(patsubst $(dst)/images/%,$(dst)/html/%,$(pngconvertedimages))
htmlpngimages := $(patsubst $(dst)/images/%,$(dst)/html/%,$(pngconvertedimages))
geminipngimages := $(patsubst $(dst)/images/%,$(dst)/gemini/%,$(pngconvertedimages))
gopherpngimages := $(patsubst $(dst)/images/%,$(dst)/gopher/%,$(pngconvertedimages))

$(dst)/images/%.png: source/data/%.png
	@$(call img,$(convertflags))

# -- Handle other files

otherfiles := $(shell find $(src) \
			  			-not -name "*.md" \
						-not -name "*.png" \
						-not -name "*.jpg" \
						-not -name "*.gif" \
						-not -name "finger.txt" \
						-not -name "meta" \
						-not -name ".DS_Store" \
						-type f)

otherfileshtml := $(patsubst $(src)/%,$(dst)/html/%,$(otherfiles))
otherfilesgopher := $(patsubst $(src)/%,$(dst)/gopher/%,$(otherfiles))
otherfilesgemini := $(patsubst $(src)/%,$(dst)/gemini/%,$(otherfiles))
targetotherfiles := $(otherfileshtml) $(otherfilesgemini) $(otherfilesgopher)


others: $(targetotherfiles)

$(targetotherfiles): $(otherfiles)
	@$(call copy)

# -- Main

targetimages := $(pngtargetimages) $(giftargetimages) $(jpgtargetimages)
htmlimages := $(htmlpngimages) $(htmlgifimages) $(htmljpgimages)
geminiimages := $(geminipngimages) $(geminigifimages) $(geminijpgimages)
gophermapimages := $(gopherpngimages) $(gophergifimages) $(gopherjpgimages)

html := $(htmlindex) $(htmlrss) $(htmlpages) $(htmltheme) $(htmlimages) $(targetimages) $(otherfileshtml)
gmi := $(gmiindex) $(gmipages) $(gmitheme) $(gmiimages) $(targetimages) $(otherfilesgemini)
gophermap := $(gophermapindex) $(gophermappages) $(gophermaptheme) $(gophermapimages) $(targetimages) $(otherfilesgopher)


finger := $(dst)/finger/info


define showvarfn
	echo $(1)
	echo ${$(1)} | tr ' ' '\n' | sed 's/^/  * /'
endef

debug:
	@echo "debug"
	@echo "-----"
	@$(call showvarfn,otherfiles)
	@$(call showvarfn,otherfilescopy)
	@$(call showvarfn,targetotherfiles)

help:
	$(info blarg start|help)

build: build_html build_gmi build_gopher build_finger

build_html: $(html)

build_gmi: $(gmi)

build_gopher: $(gophermap)

build_finger: $(finger)


# -- Functions

# -- HTML

define htmlheaderfn
	set -a \
		&& source "source/data/meta" \
		&& export SITE_NAV=$$($(call htmltocfn,$(htmlpages),page)) \
		&& export COVER_IMAGE=$$($(call defaultfilefn,$(1),images/cover.jpg,/images/cover.jpg)) \
		&& cat source/theme/header.html \
			| envsubst $(ALLOWED_PARAMS)
endef

define htmltocfn
	echo $(1) \
		| sed -e 's| |\n|g' \
		| sed -e 's|^build/html||' \
		| grep '^/$(2)' \
		| sort -r \
		| while read $(2); do \
			set -a; \
			source "source/data/$$(dirname $$$(2))/meta"; \
			cat source/theme/index.$(2).html \
				| LINK=$$(dirname $$$(2))/ envsubst $(ALLOWED_PARAMS); \
		  done \
		| envsubst $(ALLOWED_PARAMS)
endef

define htmlbodyfn
	set -a \
		&& source "$(<D)/meta" \
		&& markdown $< \
			| envsubst $(ALLOWED_PARAMS)
endef

define htmlfooterfn
	set -a \
		&& source "source/data/meta" \
		&& cat source/theme/footer.html \
			| envsubst $(ALLOWED_PARAMS)
endef

define defaultfilefn
	[ -f $(1)/$(2) ] && echo $(2) || echo $(3)
endef

define xmlheaderfn
	set -a \
		&& source "source/data/meta" \
		&& cat source/theme/header.xml \
			| SITE_LASTBUILD=$$(date -R) envsubst $(ALLOWED_PARAMS)
endef

define xmltocfn
	echo $(1) \
		| sed -e 's| |\n|g' \
		| sed -e 's|^build/html||' \
		| sed -e 's|\.html$$|.md|' \
		| grep '^/$(2)' \
		| sort -r \
		| while read $(2); do \
			set -a; \
			source "source/data/$$(dirname $$$(2))/meta"; \
			cat source/theme/index.xml \
				| \
					LINK=$$(dirname $$$(2))/ \
					DESCRIPTION=$$(cat source/data/$$$(2) | head -1 | sed -r 's/([.*\?]|[.*\.]|[.*!]).*/\1/') \
				envsubst $(ALLOWED_PARAMS); \
		  done \
		| envsubst $(ALLOWED_PARAMS)
endef

define xmlfooterfn
	set -a \
		&& source "source/data/meta" \
		&& cat source/theme/footer.xml \
			| envsubst $(ALLOWED_PARAMS)
endef

build/html/%.html: source/data/%.md 
	@echo $*.html
	@mkdir -p $(@D)
	$(call htmlheaderfn,$(<D)) > $@
	@$(call htmlbodyfn) >> $@
	@$(call htmlfooterfn) >> $@

build/html/index.html: $(htmlpages) $(htmltheme)
	@echo $(@F)
	@mkdir -p $(@D)
	@$(call htmlheaderfn) > $@
	@echo "<ul>" >> $@
	@$(call htmltocfn,$^,post) >> $@
	@echo "</ul>" >> $@
	@$(call htmlfooterfn) >> $@

build/html/index.xml: $(htmlpages) $(htmltheme)
	@echo $(@F)
	@mkdir -p $(@D)
	@$(call xmlheaderfn) > $@
	$(call xmltocfn,$^,post) >> $@
	@$(call xmlfooterfn) >> $@

build/html/assets/%: source/theme/assets/%
	$(call copy)

$(dst)/html/%.jpg: build/images/%.jpg
	@$(call copy)

$(dst)/html/%.gif: build/images/%.gif
	@$(call copy)

$(dst)/html/%.png: build/images/%.png
	@$(call copy)

$(dst)/html/%.pdf: source/data/%.pdf
	@$(call copy)

# -- Gemini

define mdtogmi
	gawk \
		' \
		BEGIN { \
		    refcnt=0; \
		    preformat=0; \
		}; \
		/^```/ { preformat=!preformat }; \
		{ \
		    if (preformat) { \
		        print $$0; \
		        next; \
		    } \
		 	while(match($$0, /!\[[^\]]*\]\([^\)]+\)/)){ \
		 		split(substr($$0, RSTART, RLENGTH), a, /(!\[)|\)|(\]\()/); \
		 		sub(/!\[[^\]]*\]\([^\)]+\)/, "=> "a[3]"  "a[2]); \
		 	} \
		    while(match($$0, /[^!]?\[[^\]]*\]\([^\]]*\)/)) { \
				split(substr($$0, RSTART, RLENGTH), a, /[\[\)]|(\]\()/); \
		        refs[++refcnt]="=> "a[3]"  "a[2] \
				sub(/\[[^\]]*\]\([^\)]+\)/, a[2]" (ref#"refcnt")"); \
		    } \
		    sub(/^\s+/, ""); \
		    sub(/\t/, "  "); \
		    sub(/^###+/, "###"); \
		    print $$0; \
		}; \
		END { \
		    if (refcnt>0) { \
		        print ""; \
		        print "# Table of refs:"; \
		        print ""; \
		        for (x=1; x <= refcnt; x++) \
		            print refs[x]; \
		    } \
		} \
		' $(1)
endef

define gmiheaderfn
	set -a \
		&& source "source/data/meta" \
		&& export SITE_NAV=$$($(call gmitocfn,$(gmipages),page)) \
		&& cat source/theme/header.gmi \
			| envsubst $(ALLOWED_PARAMS)
endef

define gmitocfn
	echo $(1) \
		| sed -e 's| |\n|g' \
		| sed -e 's|^build/gemini||' \
		| grep '^/$(2)' \
		| sort -r \
		| while read $(2); do \
			set -a; \
			source "source/data/$$(dirname $$$(2))/meta"; \
			cat source/theme/index.$(2).gmi \
				| LINK=$$(dirname $$$(2))/ envsubst $(ALLOWED_PARAMS); \
		  done \
		| envsubst $(ALLOWED_PARAMS)
endef

define gmibodyfn
	set -a \
		&& source "$(<D)/meta" \
		&& $(call mdtogmi,$<) \
			| envsubst $(ALLOWED_PARAMS)
endef

define gmifooterfn
	set -a \
		&& source "source/data/meta" \
		&& cat source/theme/footer.gmi \
			| envsubst $(ALLOWED_PARAMS)
endef

build/gemini/%.gmi: source/data/%.md 
	@echo $*.gmi
	@mkdir -p $(@D)
	@$(call gmiheaderfn) > $@
	@$(call gmibodyfn) >> $@
	@$(call gmifooterfn) >> $@

build/gemini/index.gmi: $(gmipages) $(gmitheme)
	@echo $(@F)
	@mkdir -p $(@D)
	@$(call gmiheaderfn) > $@
	@$(call gmitocfn,$^,post) >> $@
	@$(call gmifooterfn) >> $@

$(dst)/gemini/%.jpg: build/images/%.jpg
	@$(call copy)

$(dst)/gemini/%.gif: build/images/%.gif
	@$(call copy)

$(dst)/gemini/%.png: build/images/%.png
	@$(call copy)

# images + other files

# -- Gopher

define mdtogophermap
	gawk \
		' \
		BEGIN { \
		    refcnt=1; \
		    preformat=0; \
		}; \
		/^```/ { \
		    preformat=!preformat; \
		    sub(/^```/, ""); \
		}; \
		{ \
		    if (preformat) { \
		        sub(/^\s+/, "  "); \
		        print $$0; \
		        next; \
		    }; \
		    sub(/^\s+/, ""); \
		    sub(/\t/, "  "); \
		 	while(match($$0, /!\[[^\]]*\]\([^\)]*\)/)){ \
		 		split(substr($$0, RSTART, RLENGTH), a, /(!\[)|\)|(\]\()/); \
		        if (a[3]~/\.gif$$/) { \
		 		    sub(/!\[[^\]]*\]\([^\)]+\)/, "g"a[2]"\t"a[3]); \
		        } else { \
		 		    sub(/!\[[^\]]*\]\([^\)]+\)/, "I"a[2]"\t"a[3]); \
		        } \
		 	}; \
		    while(match($$0, /[^!]?\[[^\]]*\]\([^\)]*\)/)) { \
				split(substr($$0, RSTART, RLENGTH), a, /[\[\)]|(\]\()/); \
		        if (a[3]~"^http|mailto") { \
		            refs[refcnt]="h[ref#"refcnt"] "a[2]"\tURL:"a[3]; \
		        } else { \
		            refs[refcnt]="1[ref#"refcnt"] "a[2]"\t"a[3]; \
		        } \
				sub(/\[[^\]]*\]\([^\)]+\)/, a[2]" (ref#"refcnt++")"); \
		    }; \
		    $$0 = gensub(/^#+\s*(.*)$$/, "// \\1 //", "g"); \
		    $$0 = gensub(/\*+([^\*]+)\*+/, "\\1", "g"); \
		    partcnt=split($$0,parts,/\s+/); \
		    l=0; \
		    for(x=1;x<=partcnt;x++) { \
		         l=l+length(parts[x])+1; \
		         if (l>65) { \
		             printf "\n"; \
		             l=0; \
		         }; \
		         printf "%s ",parts[x]; \
		     }; \
		     print ""; \
		}; \
		END { \
		    if (refcnt>0) { \
		        print ""; \
		        print "// Table of refs //"; \
		        print ""; \
		        for (x=1; x <= refcnt; x++) print refs[x]; \
		    }; \
		} \
		' $(1)
endef

define gophermapheaderfn
	set -a \
		&& source "source/data/meta" \
		&& export SITE_NAV=$$($(call gophermaptocfn,$(gophermappages),page)) \
		&& cat source/theme/header.gophermap \
			| envsubst $(ALLOWED_PARAMS)
endef

define gophermaptocfn
	echo $(1) \
		| sed -e 's| |\n|g' \
		| sed -e 's|^build/gopher||' \
		| grep '^/$(2)' \
		| sort -r \
		| while read $(2); do \
			set -a; \
			source "source/data/$$(dirname $$$(2))/meta"; \
			cat source/theme/index.$(2).gophermap \
				| LINK=$$(dirname $$$(2))/ envsubst $(ALLOWED_PARAMS); \
		  done \
		| envsubst $(ALLOWED_PARAMS)
endef

define gophermapbodyfn
	set -a \
		&& source "$(<D)/meta" \
		&& $(call mdtogophermap,$<) \
			| envsubst $(ALLOWED_PARAMS)
endef

define gophermapfooterfn
	set -a \
		&& source "source/data/meta" \
		&& cat source/theme/footer.gophermap \
			| envsubst $(ALLOWED_PARAMS)
endef

build/.gophershadow/%.gophermap: source/data/%.md 
	@echo $*.gophermap
	@mkdir -p $(@D)
	@$(call gophermapheaderfn) > $@
	@$(call gophermapbodyfn) >> $@
	@$(call gophermapbodyfn) >> $@
	@$(call gophermapfooterfn) >> $@
	@mkdir -p build/gopher/$(dir $*)
	@cp -a $@ build/gopher/$(dir $*)/gophermap

build/gopher/gophermap: $(gophermappages) $(gophermaptheme)
	@echo $(@F)
	@mkdir -p $(@D)
	@$(call gophermapheaderfn) > $@
	@$(call gophermaptocfn,$^,post) >> $@
	@$(call gophermapfooterfn) >> $@

$(dst)/gopher/%.jpg: build/images/%.jpg
	@$(call copy)

$(dst)/gopher/%.gif: build/images/%.gif
	@$(call copy)

$(dst)/gopher/%.png: build/images/%.png
	@$(call copy)

# -- Finger

define expand
	set -a \
		&& source "$2" \
		&& cat $1 \
			| envsubst $(ALLOWED_PARAMS)
endef


$(dst)/finger/info: source/data/finger.txt source/theme/finger.header source/theme/finger.footer
	@echo $(@F)
	@mkdir -p $(@D)
	@$(call expand,source/theme/finger.header,source/data/meta) > $@
	@$(call expand,$<,source/data/meta) >> $@
	@$(call expand,source/theme/finger.footer,source/data/meta) >> $@


# -- Deploy

deploy_www:
	@echo "Copying www site to server..."
	@rsync -avzhe ssh --progress ./build/html/ ${SERVER}:${DATA_PATH}/www --delete

deploy_gopher:
	@echo "Copying gopher site to server..."
	@rsync -avzhe ssh --progress ./build/gopher/ ${SERVER}:${DATA_PATH}/gopher --delete

deploy_gemini:
	@echo "Copying gemini site to server..."
	@rsync -avzhe ssh --progress ./build/gemini/ ${SERVER}:${DATA_PATH}/gemini --delete

deploy_finger:
	@echo "Copying finger data to server..."
	@rsync -avzhe ssh --progress ./build/finger/ ${SERVER}:${DATA_PATH}/finger --delete


# -- Tools

clean: clean_html clean_gmi clean_gopher clean_finger
	@rm -rf build

clean_html:
	@rm -rf build/html

clean_gmi:
	@rm -rf build/gemini

clean_gopher:
	@rm -rf build/gopher build/.gophershadow

clean_finger:
	@rm -rf build/finger

serve:
	@echo "http://127.0.0.1:8888"
	@bozohttpd -b -f -I 8888 -X -x index.html ./build/html

watch:
	@echo "Watching..."
	@while sleep 0.1; do find source | entr -d trash build; done
