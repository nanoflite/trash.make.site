#!/usr/bin/env make -f

src := source/data
dst := build

resizeflag := 800x600\>
ditherflag := bn256x256

convertflags := -set colorspace Gray -separate -average \
				-resize $(resizeflag) 

convertjpg := $(convertflags) -ordered-dither $(ditherflag)


.ONESHELL:

.PHONY: debug help clean serve

ALLOWED_PARAMS := '$$SITE_TITLE $$SITE_DESCRIPTION $$SITE_IMAGE $$SITE_NAV \
	$$SITE_URL $$SITE_COPYRIGHT $$SITE_TTL $$TITLE $$DATE $$IMAGE $$LINK'

mdfiles := $(shell find source/data -name \*.md)


# meta:
# $(call pages,html)

htmlpages := $(patsubst %.md,%.html,\
				$(patsubst source/data/%,build/html/%,\
					$(mdfiles)))

htmltheme := $(shell find source/theme -name "*.html") \
				$(patsubst source/theme/assets/%,build/html/assets/%,\
			  		$(shell find source/theme/assets -type f))

htmlindex := $(dst)/html/index.html

gmipages := $(patsubst %.md,%.gmi,\
				$(patsubst source/data/%,build/gemini/%,\
					$(mdfiles)))

gmitheme := $(shell find source/theme -name "*.gmi")

gmiindex := $(dst)/gemini/index.gmi


# -- Tools

define copy
	echo "copy $(@F)"
	mkdir -p $(@D)
	cp -a $< $@
endef

# -- Images

define img
	echo "img $(@F)"
	mkdir -p $(@D)
	convert $< $1 $@ 
endef

# -- Handle JPG images


## candidate for meta programming
# $(eval $(call handleimages,jpg))
# --> above call generates below + gemini and gopher images)
jpgsourceimages := $(shell find $(src) -name "*.jpg") 
jpgconvertedimages := $(patsubst $(src)/%,$(dst)/images/%,$(jpgsourceimages))
jpgtargetimages := $(patsubst $(dst)/images/%,$(dst)/html/%,$(jpgconvertedimages))
htmljpgimages := $(patsubst $(dst)/images/%,$(dst)/html/%,$(jpgconvertedimages))


$(dst)/images/%.jpg: source/data/%.jpg
	@$(call img,$(convertjpg))


# -- Handle GIF images

gifsourceimages := $(shell find $(src) -name "*.gif") 
gifconvertedimages := $(patsubst $(src)/%,$(dst)/images/%,$(gifsourceimages))
giftargetimages := $(patsubst $(dst)/images/%,$(dst)/html/%,$(gifconvertedimages))
htmlgifimages := $(patsubst $(dst)/images/%,$(dst)/html/%,$(gifconvertedimages))

$(dst)/images/%.gif: source/data/%.gif
	@$(call img,$(convertflags))

# -- Handle PNG images

pngsourceimages := $(shell find $(src) -name "*.png") 
pngconvertedimages := $(patsubst $(src)/%,$(dst)/images/%,$(pngsourceimages))
pngtargetimages := $(patsubst $(dst)/images/%,$(dst)/html/%,$(pngconvertedimages))
htmlpngimages := $(patsubst $(dst)/images/%,$(dst)/html/%,$(pngconvertedimages))

$(dst)/images/%.png: source/data/%.png
	@$(call img,$(convertflags))

# -- Main

targetimages := $(pngtargetimages) $(giftargetimages) $(jpgtargetimages)
htmlimages := $(htmlpngimages) $(htmlgifimages) $(htmljpgimages)

html := $(htmlindex) $(htmlpages) $(htmltheme) $(htmlimages)
gmi := $(gmiindex) $(gmipages) $(gmitheme) $(gmiimages)

debug:
	@echo "HTML theme"
	@echo $(htmltheme) | tr ' ' '\n'

help:
	$(info blarg start|help)

build: build_html build_gmi

build_html: $(html)

build_gmi: $(gmi)


# TODO:
#	First, make it work:
#   - images (jpg -> dither, png|gif -> BW
#   	-> convert once, copy over to html/gopher/gemini folder
#   - other files copied as is (allowed: pdf, ...?
#   - gemini + daemon
#   - gopher + daemon
#   - finger + daemon
#   - deploy with rsync
#   Next, make it correct:
#   --> functions for header, footer, body, nav, list, rss
#   --> clean up code, m
#   --> Next, make it presentable, documented
#   Then, make it fast
#   ==> DONE ;-)

# -- Functions

# -- HTML

define htmlheaderfn
	set -a \
		&& source "source/data/meta" \
		&& export SITE_NAV=$$($(call htmltocfn,$(htmlpages),page)) \
		&& cat source/theme/header.html \
			| envsubst $(ALLOWED_PARAMS)
endef

define htmltocfn
	echo $(1) \
		| sed -e 's| |\n|g' \
		| sed -e 's|^build/html||' \
		| grep '^/$(2)' \
		| sort -r \
		| while read $(2); do \
			set -a; \
			source "source/data/$$(dirname $$$(2))/meta"; \
			cat source/theme/index.$(2).html \
				| LINK=$$(dirname $$$(2))/ envsubst $(ALLOWED_PARAMS); \
		  done \
		| envsubst $(ALLOWED_PARAMS)
endef

define htmlbodyfn
	set -a \
		&& source "$(<D)/meta" \
		&& markdown $< \
			| envsubst $(ALLOWED_PARAMS)
endef

define htmlfooterfn
	set -a \
		&& source "source/data/meta" \
		&& cat source/theme/footer.html \
			| envsubst $(ALLOWED_PARAMS)
endef

build/html/%.html: source/data/%.md 
	@echo $*.html
	@mkdir -p $(@D)
	@$(call htmlheaderfn) > $@
	@$(call htmlbodyfn) >> $@
	@$(call htmlfooterfn) >> $@

build/html/index.html: $(htmlpages) $(htmltheme)
	@echo $(@F)
	@mkdir -p $(@D)
	@$(call htmlheaderfn) > $@
	@$(call htmltocfn,$^,post) >> $@
	@$(call htmlfooterfn) >> $@

build/html/assets/%: source/theme/assets/%
	$(call copy)

$(dst)/html/%.jpg: build/images/%.jpg
	@$(call copy)

$(dst)/html/%.gif: build/images/%.gif
	@$(call copy)

$(dst)/html/%.png: build/images/%.png
	@$(call copy)

# -- Gemini

define mdtogmi
	gawk \
		' \
		BEGIN { \
		    refcnt=0; \
		    preformat=0; \
		}; \
		/^```/ { preformat=!preformat } \
		{ \
		    if (preformat) { \
		        print $$0; \
		        next; \
		    } \
		 	while(match($$0, /!\[[^\]]*\]\([^\)]+\)/)){ \
		 		split(substr($$0, RSTART, RLENGTH), a, /(!\[)|\)|(\]\()/); \
		 		sub(/!\[[^\]]*\]\([^\)]+\)/, "=> "a[3]"  "a[2]); \
		 	} \
		    while(match($$0, /[^!]?\[[^\]]*\]\([^\]]*\)/)) { \
				split(substr($$0, RSTART, RLENGTH), a, /[\[\)]|(\]\()/); \
		        refs[++refcnt]="=> "a[3]"  "a[2] \
				sub(/\[[^\]]*\]\([^\)]+\)/, a[2]" (ref#"refcnt")"); \
		    } \
		    sub(/^\s+/, ""); \
		    sub(/\t/, "  "); \
		    sub(/^###+/, "###"); \
		    print $$0; \
		}; \
		END { \
		    if (refcnt>0) { \
		        print ""; \
		        print "# Table of refs:"; \
		        print ""; \
		        \
		        for (x=1; x <= refcnt; x++) \
		            print refs[x]; \
		    } \
		} \
		' $(1)
endef

define gmiheaderfn
	set -a \
		&& source "source/data/meta" \
		&& export SITE_NAV=$$($(call gmitocfn,$(gmipages),page)) \
		&& cat source/theme/header.gmi \
			| envsubst $(ALLOWED_PARAMS)
endef

define gmitocfn
	echo $(1) \
		| sed -e 's| |\n|g' \
		| sed -e 's|^build/gemini||' \
		| grep '^/$(2)' \
		| sort -r \
		| while read $(2); do \
			set -a; \
			source "source/data/$$(dirname $$$(2))/meta"; \
			cat source/theme/index.$(2).gmi \
				| LINK=$$(dirname $$$(2))/ envsubst $(ALLOWED_PARAMS); \
		  done \
		| envsubst $(ALLOWED_PARAMS)
endef

define gmibodyfn
	set -a \
		&& source "$(<D)/meta" \
		&& $(call mdtogmi,$<) \
			| envsubst $(ALLOWED_PARAMS)
endef

define gmifooterfn
	set -a \
		&& source "source/data/meta" \
		&& cat source/theme/footer.gmi \
			| envsubst $(ALLOWED_PARAMS)
endef

build/gemini/%.gmi: source/data/%.md 
	@echo $*.gmi
	@mkdir -p $(@D)
	@$(call gmiheaderfn) > $@
	@$(call gmibodyfn) >> $@
	$(call gmifooterfn) >> $@

build/gemini/index.gmi: $(gmipages) $(gmitheme)
	@echo $(@F)
	@mkdir -p $(@D)
	@$(call gmiheaderfn) > $@
	@$(call gmitocfn,$^,post) >> $@
	$(call gmifooterfn) >> $@

# -- Tools

clean: clean_html clean_gmi
	@rm -rf build

clean_html:
	@rm -rf build/html

clean_gmi:
	@rm -rf build/gemini

serve:
	@echo "http://127.0.0.1:8888"
	@bozohttpd -b -f -I 8888 -X -x index.html ./build/html

watch:
	@echo "Watching..."
	@while sleep 0.1; do find source | entr -d trash build; done
